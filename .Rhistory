library(tidyverse)
library(openintro)
library(ggimage)
library(ggrepel)
knitr::opts_chunk$set(out.width = "100%")
knitr::include_graphics("img/plot-to-recreate.png")
setwd("~/GitHub/ids-s1-21/homework_instructions/hw-01")
devtools::install_github("rstudio-education/dsbox")
devtools::install_github("rstudio-education/dsbox")
edibnb %>%
filter(neighbourhood %in% top_5_medians) %>%
ggplot(aes(x = price, y = neighbourhood, color = neighbourhood, fill = neighbourhood)) +
geom_density_ridges(alpha = 0.5) +
guides(fill = FALSE)
library(tidyverse)
library(dsbox)
library(ggridges)
edibnb %>%
filter(!is.na(neighbourhood)) %>%
ggplot(aes(x = price)) +
geom_histogram(binwidth = 50) +
facet_wrap(~neighbourhood, ncol = 1, scales = "free_y")
edibnb %>%
group_by(neighbourhood) %>%
summarise(med_price = median(price, na.rm = TRUE)) %>%
slice_max(med_price, n = 5)
top_5_medians <- c("New Town", "Old Town", "West End", "Stockbridge",
"Bruntsfield", "Marchmont", "Southside")
edibnb %>%
filter(neighbourhood %in% top_5_medians) %>%
ggplot(aes(x = price, y = neighbourhood, color = neighbourhood, fill = neighbourhood)) +
geom_density_ridges(alpha = 0.5) +
guides(fill = FALSE)
edibnb %>%
filter(neighbourhood %in% top_5_medians) %>%
ggplot(aes(x = price, y = neighbourhood, color = neighbourhood, fill = neighbourhood)) +
geom_density_ridges(alpha = 0.5) +
guides(neighbourhood = FALSE)
edibnb %>%
filter(neighbourhood %in% top_5_medians) %>%
ggplot(aes(x = price, y = neighbourhood, color = neighbourhood, fill = neighbourhood)) +
geom_density_ridges(alpha = 0.5) +
guides(fill = "none")
edibnb %>%
filter(neighbourhood %in% top_5_medians) %>%
ggplot(aes(x = price, y = neighbourhood, color = neighbourhood, fill = neighbourhood)) +
geom_density_ridges(alpha = 0.5) +
guides(fill = "none", color="none")
library(tidyverse)
library(dsbox)
library(ggridges)
edibnb %>%
filter(!is.na(neighbourhood)) %>%
ggplot(aes(x = price)) +
geom_histogram(binwidth = 50) +
facet_wrap(~neighbourhood, ncol = 1, scales = "free_y")
edibnb %>%
group_by(neighbourhood) %>%
summarise(med_price = median(price, na.rm = TRUE)) %>%
slice_max(med_price, n = 5)
top_5_medians <- c("New Town", "Old Town", "West End", "Stockbridge",
"Bruntsfield", "Marchmont", "Southside")
edibnb %>%
filter(neighbourhood %in% top_5_medians) %>%
ggplot(aes(x = price, y = neighbourhood, color = neighbourhood, fill = neighbourhood)) +
geom_density_ridges(alpha = 0.5) +
guides(fill = "none", color="none")
edibnb %>%
filter(neighbourhood %in% top_5_medians) %>%
group_by(neighbourhood) %>%
summarise(
min  = min(price, na.rm = TRUE),
mean = mean(price, na.rm = TRUE),
med  = median(price, na.rm = TRUE),
sd   = sd(price, na.rm = TRUE),
iqr  = IQR(price, na.rm = TRUE),
max  = max(price, na.rm = TRUE)
)
edibnb %>%
filter(!is.na(neighbourhood)) %>%
mutate(neighbourhood = fct_reorder(neighbourhood, review_scores_rating, median, .desc = FALSE)) %>%
ggplot(aes(x = review_scores_rating, y = neighbourhood, fill = neighbourhood)) +
geom_density_ridges(alpha = 0.5) +
scale_fill_viridis_d() +
guides(fill = "none") +
labs(
x = "Review scores rating",
y = "Neighbourhood",
title = "Edinburgh Airbnb listings review scores rating",
subtitle = "Neighbourhoods listed in order of decreasing median price"
)
?edibnb
setwd("~/GitHub/ids-s1-21/instructors_area/keys_and_marking/hw/hw-02")
setwd("~/GitHub/ids-s1-21/homework_instructions/hw-02")
# first part of url
root <- "https://www.opensecrets.org/political-action-committees-pacs/foreign-connected-pacs?cycle="
# second part of url (election years as a sequence)
year <- seq(from = ___, to = ___, by = ___)
# construct urls by pasting first and second parts together
urls <- paste0(___, ___)
library(tidyverse)
library(scales)
pac_all <- read_csv(here::here("hw/hw-03/data/pac-all.csv"))
setwd("~/GitHub/ids-s1-21/instructors_area/keys_and_marking/hw/hw-03")
pac_all <- read_csv(here::here("hw/hw-03/data/pac-all.csv"))
pac_all <- read_csv(here::here("/data/pac-all.csv"))
setwd("~/GitHub/ids-s1-21/instructors_area/keys_and_marking/hw/hw-03")
pac_all <- read_csv(here::here("/data/pac-all.csv"))
here::here
here::here()
pac_all <- read_csv("/data/pac-all.csv")
setwd("~/GitHub/ids-s1-21/instructors_area/keys_and_marking/hw/hw-03")
pac_all <- read_csv("/data/pac-all.csv")
pac_all <- read_csv("./data/pac-all.csv")
glimpse(pac_all)
pac_all <- pac_all %>%
separate(country_parent, into = c("country", "parent"), sep = "/", extra = "merge")
pac_all
parse_currency <- function(x){
x %>%
# remove dollar sign
str_remove("\\$") %>%
# remove all occurences of commas
str_remove_all(",") %>%
# convert to numeric
as.numeric()
}
pac_all <- pac_all %>%
mutate(
total = parse_currency(total),
dems = parse_currency(dems),
repubs = parse_currency(repubs)
)
pac_all
pac_all %>%
filter(country %in% c("Canada", "Mexico")) %>%
group_by(country, year) %>%
summarise(total = sum(total),
.groups = "drop") %>%
ggplot(aes(x = year, y = total, color = country)) +
geom_line(aes(group = country), size = 1) +
scale_y_continuous(labels = dollar_format(scale = 1e-6, suffix = "M")) +
labs(title = "Total Contributions from All Foreign-connected PACs",
subtitle = "in Canada and Mexico",
x = "Year",
y = "Total Contribution in $",
color = "Country") +
theme_minimal()
pac_all %>%
filter(country == "UK", year < 2020) %>%
group_by(year) %>%
summarise(Democrat = sum(dems),
Republican = sum(repubs),
.groups = "drop") %>%
pivot_longer(cols = c(Democrat, Republican),
names_to = "party",
values_to = "amount") %>%
ggplot(aes(x = year)) +
geom_line(aes(y = amount, group = party, color = party),
size = 1) +
scale_color_manual(values = c("blue", "red")) +
scale_y_continuous(labels = dollar_format(scale = 1e-6, suffix = "M")) +
labs(
x = "Year",
y = "Amount",
color = "Party",
title = "Contribution to US politics from UK-Connected PACs",
subtitle = "By party, over time"
) +
theme_minimal()
setwd("~/GitHub/ids-s1-21/homework_instructions/hw-04")
library(tidyverse)
library(tidymodels)
library(dsbox)
gss16 <- gss16 %>%
mutate(advfront = case_when(advfront %in% c("Strongly agree", "Agree") ~
"Agree",advfront %in% c("Disagree", "Don't know","Strongly disagree") ~ "Not agree"),
advfront = as.factor(advfront),
advfront = fct_relevel(advfront)) gss16 %>%
gss16 <- gss16 %>%
mutate(advfront = case_when(advfront %in% c("Strongly agree", "Agree") ~
"Agree",advfront %in% c("Disagree", "Don't know","Strongly disagree") ~ "Not agree"),
advfront = as.factor(advfront),
advfront = fct_relevel(advfront))
gss16 %>%
count(advfront)
library(tidyverse)
library(tidymodels)
library(dsbox)
knitr::opts_chunk$set(out.width = "100%", eval = TRUE)
gss16 <- gss16 %>%
mutate(
advfront = case_when(
advfront %in% c("Agree", "Strongly agree") ~ "Agree",
is.na(advfront) ~ NA_character_,
TRUE ~ "Not agree"
),
advfront = fct_relevel(advfront, "Agree", "Not agree")
)
gss16 %>%
count(advfront)
gss16 <- gss16 %>%
mutate(
polviews = case_when(
str_detect(polviews, "[Cc]onservative") ~ "Conservative",
str_detect(polviews, "[Ll]iberal") ~ "Liberal",
TRUE ~ polviews
),
polviews = fct_relevel(polviews, "Conservative", "Moderate", "Liberal")
)
gss16 %>%
count(polviews)
gss16_advfront <- gss16 %>%
select(advfront, educ, polviews, wrkstat) %>%
drop_na()
set.seed(1234)
gss16_split <- initial_split(gss16_advfront)
gss16_train <- training(gss16_split)
gss16_test  <- testing(gss16_split)
gss16_rec_1 <- recipe(advfront ~ polviews + wrkstat + educ, data = gss16_train) %>%
step_other(wrkstat, threshold = 0.10, other = "Other") %>%
step_dummy(all_nominal(), -all_outcomes())
gss16_spec <- logistic_reg() %>%
set_engine("glm")
gss16_wflow_1 <- workflow() %>%
add_model(gss16_spec) %>%
add_recipe(gss16_rec_1)
set.seed(345)
gss16_folds <- vfold_cv(gss16_train, v = 5)
gss16_fit_rs_1 <- gss16_wflow_1 %>%
fit_resamples(gss16_folds)
metrics <- collect_metrics(gss16_fit_rs_1, summarize = FALSE)
metrics %>%
filter(.metric == "roc_auc")
metrics %>%
filter(.metric == "accuracy")
collect_metrics(gss16_fit_rs_1)
gss16_rec_2 <- recipe(advfront ~ polviews + educ, data = gss16_train) %>%
step_dummy(all_nominal(), -all_outcomes())
gss16_wflow_2 <- workflow() %>%
add_model(gss16_spec) %>%
add_recipe(gss16_rec_2)
gss16_fit_rs_2 <- gss16_wflow_2 %>%
fit_resamples(gss16_folds)
collect_metrics(gss16_fit_rs_2)
gss16_fit_1 <- gss16_wflow_1 %>%
fit(gss16_train)
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_test_pred_1 <- predict(gss16_fit_1, new_data = gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_test_pred_1 %>%
roc_curve(truth = advfront, .pred_Agree) %>%
autoplot()
gss16_test_pred_1 %>%
roc_auc(truth = advfront, .pred_Agree)
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred))%>%
accuracy(advfront, .pred)
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred)) %>%
accuracy(advfront, .pred)
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred)) #%>%
(gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred))) #%>%
gss16_test_pred_2 <- predict(gss16_fit_2, new_data = gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_test_pred_2 %>%
roc_curve(truth = advfront, .pred_Agree) %>%
autoplot()
gss16_test_pred_2 %>%
roc_auc(truth = advfront, .pred_Agree)
gss16_test_pred_2 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred))%>%
accuracy(advfront, .pred)
?accuracy
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred),
advfront = as.factor(advfront)) %>%
accuracy(advfront, .pred)
gss16_fit_1 <- gss16_wflow_1 %>%
fit(gss16_train)
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_test_pred_1 <- predict(gss16_fit_1, new_data = gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_test_pred_1 %>%
roc_curve(truth = advfront, .pred_Agree) %>%
autoplot()
gss16_test_pred_1 %>%
roc_auc(truth = advfront, .pred_Agree)
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred),
advfront = as.factor(advfront)) %>%
accuracy(advfront, .pred)
?levels
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = as.factor(.pred, levels = levels(advfront)),
advfront = as.factor(advfront, levels = levels(advfront))) %>%
accuracy(advfront, .pred)
?as.factor
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = factor(.pred, levels = levels(advfront)),
advfront = factor(advfront, levels = levels(advfront))) %>%
accuracy(advfront, .pred)
gss16_fit_1 <- gss16_wflow_1 %>%
fit(gss16_train)
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_test_pred_1 <- predict(gss16_fit_1, new_data = gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_test_pred_1 %>%
roc_curve(truth = advfront, .pred_Agree) %>%
autoplot()
gss16_test_pred_1 %>%
roc_auc(truth = advfront, .pred_Agree)
gss16_test_pred_1 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = factor(.pred, levels = levels(advfront)),
advfront = factor(advfront, levels = levels(advfront))) %>%
accuracy(advfront, .pred)
gss16_test_pred_2 <- predict(gss16_fit_2, new_data = gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_test_pred_2 %>%
roc_curve(truth = advfront, .pred_Agree) %>%
autoplot()
gss16_test_pred_2 %>%
roc_auc(truth = advfront, .pred_Agree)
gss16_test_pred_2 %>%
mutate(.pred = if_else(.pred_Agree>0.5,
"Agree",
"Not agree"),
.pred = factor(.pred, levels = levels(advfront)),
advfront = factor(advfront, levels = levels(advfront))) %>%
accuracy(advfront, .pred)
gss16_test_pred_2 %>%
count(advfront)
gss16_sub <- gss16 %>%
filter(harass5 %in% c("Yes", "No"))
gss16_sub %>%
count(harass5)
set.seed(1234)
gss16_sub %>%
specify(response = harass5, success = "Yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
summarize(lower = quantile(stat, 0.025),
upper = quantile(stat, 0.975))
gss16 <- gss16 %>%
mutate(
polviews = case_when(
str_detect(polviews, "Liberal") ~ "Liberal", str_detect(polviews, "conservative") ~ "Conservative", str_detect(polviews, "Moderate") ~ "Moderate"),
polviews = fct_relevel(polviews), polviews = as.factor(polviews))
gss16 %>%
count(polviews)
gss16_advfront <- gss16 %>%
select(advfront, educ, polviews,wrkstat) %>% drop_na()
gss16_advfront %>%
count(advfront, educ, polviews,wrkstat)
set.seed(123)
gss16_split <- initial_split(gss16_advfront,prop = 0.75)
gss16_train <- training(gss16_split) gss16_test <- testing(gss16_split)
gss16_rec_1 <- recipe(advfront ~ polviews + wrkstat + educ, data = gss16_advfront) %>%
step_other(wrkstat, threshold = 0.10, other = "Other") %>%
step_dummy(all_nominal(), -all_outcomes())
gss16_spec <- logistic_reg() %>%
set_engine("glm")
gss16_wflow_1 <- workflow() %>%
add_model(gss16_spec) %>% add_recipe(gss16_rec_1)
set.seed(123)
gss16_folds <- vfold_cv(gss16_train, v = 5)
gss16_fit_rs_1 <- gss16_wflow_1 %>%
fit_resamples(gss16_folds)
collect_metrics(gss16_fit_rs_1,summarize = FALSE)
collect_metrics(gss16_fit_rs_1)
set.seed(123)
gss16_split <- initial_split(gss16_advfront,prop = 0.75)
gss16_train <- training(gss16_split)
gss16_test <- testing(gss16_split)
set.seed(123)
gss16_folds <- vfold_cv(gss16_train , v = 5)
gss16_rec_2 <- recipe(advfront ~ polviews + educ, data = gss16_train) %>% step_dummy(all_nominal(), -all_outcomes())
gss16_wflow_2 <- workflow() %>% add_model(gss16_spec) %>% add_recipe(gss16_rec_2)
gss16_fit_rs_2 <- gss16_wflow_2 %>%
fit_resamples(gss16_folds)
collect_metrics(gss16_fit_rs_2,summarize = FALSE)
collect_metrics(gss16_fit_rs_2)
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_pred_2 <- predict(gss16_fit_2, gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront)) gss16_pred_2 %>%
gss16_pred_2 %>% roc_auc(
truth = factor(advfront), .pred_Agree)
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_pred_2 <- predict(gss16_fit_2, gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront)) gss16_pred_2 %>%
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_pred_2 <- predict(gss16_fit_2, gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_pred_2 %>%
roc_curve(
truth = factor(advfront),
.pred_Agree) %>% autoplot()
gss16_pred_2 %>% roc_auc(
truth = factor(advfront), .pred_Agree)
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_pred_2 <- predict(gss16_fit_2, gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront)) gss16_pred_2 %>%
gss16_fit_2 <- gss16_wflow_2 %>%
fit(gss16_train)
gss16_pred_2 <- predict(gss16_fit_2, gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_pred_2 %>%
roc_curve(
truth = factor(advfront),
.pred_Agree) %>% autoplot()
gss16_pred_2 %>% roc_auc(
truth = factor(advfront), .pred_Agree)
gss16_fit_1 <- gss16_wflow_1 %>%
fit(gss16_train)
gss16_pred_1 <- predict(gss16_fit_1, gss16_test, type = "prob") %>%
bind_cols(gss16_test %>% select(advfront))
gss16_pred_1 %>% roc_curve(
truth = factor(advfront), .pred_Agree) %>%
autoplot()
gss16_pred_1 %>% roc_auc(
truth = factor(advfront), .pred_Agree)
gss16_harass5 <- gss16 %>%
filter(harass5 == "Yes" | harass5 == "No")
gss16_harass5 %>% count(harass5)
gss16_harass5_df <- gss16_harass5 %>%
specify( response = harass5 , success ="Yes") %>% generate(reps = 17000 , type = "bootstrap") %>% calculate(stat = "prop") %>%
summarize(lower = quantile(stat, 0.025),
upper = quantile(stat, 0.975))
gss16_harass5_df <- gss16_harass5 %>%
specify( response = harass5 , success ="Yes") %>% generate(reps = 17000 , type = "bootstrap") %>% calculate(stat = "prop") %>%
summarize(lower = quantile(stat, 0.025),
upper = quantile(stat, 0.975))
`lab-02-actions-results` <- readRDS("C:/Users/delliot2/Documents/GitHub/ids-s1-20/keys-main/marking/lab/lab-02/lab-02-actions-results.rds")
View(`lab-02-actions-results`)
